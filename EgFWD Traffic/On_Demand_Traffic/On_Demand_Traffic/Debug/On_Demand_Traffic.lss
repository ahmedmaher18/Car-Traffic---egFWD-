
On_Demand_Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001030  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  0000204e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bb  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000037bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  74:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
#include "application.h"
void app_init()
{
	// configuring output pins:
	
	DIO_init(PORT_A, PIN0, OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	81 e4       	ldi	r24, 0x41	; 65
  82:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	DIO_init(PORT_A, PIN1, OUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	DIO_init(PORT_A, PIN2, OUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	DIO_init(PORT_B, PIN0, OUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	DIO_init(PORT_B, PIN1, OUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	DIO_init(PORT_B, PIN2, OUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 ab 01 	call	0x356	; 0x356 <DIO_init>
	// initializing used variables
	
	carTrafficStatus = GREEN;
  b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carTrafficStatus>
	backFromPedestrian = NO;
  bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	direction = DOWN;
  c0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <direction>
	// Interrupts setup
	
	sei();         // Enabling Global Interrupts
  c4:	78 94       	sei
	MCUCR|= (1<<1) | (1<<0);  // Rising Edge Setup
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<6); // External Interrupt Request 0 Enable
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59
  d2:	08 95       	ret

000000d4 <blinkYellowTraffic>:
		}
	}
}

void blinkYellowTraffic(uint8_t mode) 
{
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	18 2f       	mov	r17, r24
	
	uint8_t counter = 5; // counter to keep toggling Yellow led every second for 5 seconds
	for (int i = 0; i<counter; i++)
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	11 c0       	rjmp	.+34     	; 0x104 <blinkYellowTraffic+0x30>
	{
		// if we are in pedestrian mode we want to toggle both yellow traffic but the car traffic in both cases will be toggled
		if (mode == PEDESTRIAN_TRAFFIC) 
  e2:	11 30       	cpi	r17, 0x01	; 1
  e4:	21 f4       	brne	.+8      	; 0xee <blinkYellowTraffic+0x1a>
		{
		LED_toggle(PEDESTRIAN_PORT, YELLOW);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 a3 01 	call	0x346	; 0x346 <LED_toggle>
		}
		LED_toggle(CAR_PORT, YELLOW);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 a3 01 	call	0x346	; 0x346 <LED_toggle>
		// 1 second delay to blink
		timer1_delay_1s();
  f6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <timer1_delay_1s>
		// if the ISR interrupted this function we want to break it as soon as possible to get back to green color in car traffic
		if (backFromPedestrian == YES) 
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	21 f0       	breq	.+8      	; 0x10a <blinkYellowTraffic+0x36>

void blinkYellowTraffic(uint8_t mode) 
{
	
	uint8_t counter = 5; // counter to keep toggling Yellow led every second for 5 seconds
	for (int i = 0; i<counter; i++)
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	c5 30       	cpi	r28, 0x05	; 5
 106:	d1 05       	cpc	r29, r1
 108:	64 f3       	brlt	.-40     	; 0xe2 <blinkYellowTraffic+0xe>
			return;
		}
		
	}
	
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	08 95       	ret

00000112 <setTrafficLight>:
	GICR|=(1<<6); // External Interrupt Request 0 Enable
}

void setTrafficLight(uint8_t traffic, uint8_t color)
{
	if (traffic == CAR_TRAFFIC) // read if we need to change car traffic or pedestrian traffic
 112:	81 11       	cpse	r24, r1
 114:	2c c0       	rjmp	.+88     	; 0x16e <setTrafficLight+0x5c>
	{
	switch(color) // see which color to implement the changes
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	89 f0       	breq	.+34     	; 0x13c <setTrafficLight+0x2a>
 11a:	18 f0       	brcs	.+6      	; 0x122 <setTrafficLight+0x10>
 11c:	62 30       	cpi	r22, 0x02	; 2
 11e:	d1 f0       	breq	.+52     	; 0x154 <setTrafficLight+0x42>
 120:	08 95       	ret
	{
		case GREEN:
		LED_on(CAR_PORT, GREEN);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 9b 01 	call	0x336	; 0x336 <LED_on>
		LED_off(CAR_PORT, YELLOW);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		LED_off(CAR_PORT, RED);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		break;
 13a:	08 95       	ret
		case YELLOW:
		LED_off(CAR_PORT, GREEN);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		LED_off(CAR_PORT , RED);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		blinkYellowTraffic(CAR_TRAFFIC);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 6a 00 	call	0xd4	; 0xd4 <blinkYellowTraffic>
		break;
 152:	08 95       	ret
		case RED:
		LED_off(CAR_PORT,GREEN);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		LED_off(CAR_PORT,YELLOW);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		LED_on(CAR_PORT, RED);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 9b 01 	call	0x336	; 0x336 <LED_on>
		break;
 16c:	08 95       	ret
	}
	}
	else if(traffic == PEDESTRIAN_TRAFFIC) // implementing same functionality but on pedestrian traffic
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	59 f5       	brne	.+86     	; 0x1c8 <setTrafficLight+0xb6>
	{
		switch(color)
 172:	61 30       	cpi	r22, 0x01	; 1
 174:	89 f0       	breq	.+34     	; 0x198 <setTrafficLight+0x86>
 176:	18 f0       	brcs	.+6      	; 0x17e <setTrafficLight+0x6c>
 178:	62 30       	cpi	r22, 0x02	; 2
 17a:	d1 f0       	breq	.+52     	; 0x1b0 <setTrafficLight+0x9e>
 17c:	08 95       	ret
		{
			case GREEN:
			LED_on(PEDESTRIAN_PORT, GREEN);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	0e 94 9b 01 	call	0x336	; 0x336 <LED_on>
			LED_off(PEDESTRIAN_PORT, YELLOW);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	82 e4       	ldi	r24, 0x42	; 66
 18a:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			LED_off(PEDESTRIAN_PORT, RED);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			break;
 196:	08 95       	ret
			case YELLOW:
			LED_off(PEDESTRIAN_PORT, GREEN);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	82 e4       	ldi	r24, 0x42	; 66
 19c:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			LED_off(PEDESTRIAN_PORT , RED);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			blinkYellowTraffic(PEDESTRIAN_TRAFFIC);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <blinkYellowTraffic>
			break;
 1ae:	08 95       	ret
			case RED:
			LED_off(PEDESTRIAN_PORT,GREEN);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	82 e4       	ldi	r24, 0x42	; 66
 1b4:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			LED_off(PEDESTRIAN_PORT,YELLOW);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
			LED_on(PEDESTRIAN_PORT, RED);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	0e 94 9b 01 	call	0x336	; 0x336 <LED_on>
 1c8:	08 95       	ret

000001ca <normalMode>:
{
	
	while(1)
	{	
		// see which car traffic color turn is it
		switch(carTrafficStatus)
 1ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carTrafficStatus>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	a9 f0       	breq	.+42     	; 0x1fc <normalMode+0x32>
 1d2:	18 f0       	brcs	.+6      	; 0x1da <normalMode+0x10>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	61 f1       	breq	.+88     	; 0x230 <normalMode+0x66>
 1d8:	f8 cf       	rjmp	.-16     	; 0x1ca <normalMode>
		{
			case GREEN:
			setTrafficLight(CAR_TRAFFIC,GREEN); // turns on the green light
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
			Timer1_delay_5s(); // 5 seconds delay
 1e2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Timer1_delay_5s>
			/* if we are back from interrupt the variable will be yes then we will need to break the switch statement
			 to start over */
			if (backFromPedestrian == YES) 
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <normalMode+0x2a>
			{
				backFromPedestrian = NO; 
 1ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 1f2:	eb cf       	rjmp	.-42     	; 0x1ca <normalMode>
			}
			// if not then we continue normally and set the yellow traffic turn
				carTrafficStatus = YELLOW;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carTrafficStatus>
				break;
 1fa:	e7 cf       	rjmp	.-50     	; 0x1ca <normalMode>
			
			case YELLOW:
			setTrafficLight(CAR_TRAFFIC,YELLOW); // implements the blinking with delay
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
			/* if we are back from interrupt the variable will be yes then we will need to break the switch statement
			 to start over */
			if (backFromPedestrian == YES)
 204:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	19 f4       	brne	.+6      	; 0x212 <normalMode+0x48>
			{
				backFromPedestrian = NO;
 20c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 210:	dc cf       	rjmp	.-72     	; 0x1ca <normalMode>
			}
			// if direction is down then its the red traffic turn
			else if(direction == DOWN)
 212:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <direction>
 216:	81 11       	cpse	r24, r1
 218:	04 c0       	rjmp	.+8      	; 0x222 <normalMode+0x58>
			{
				carTrafficStatus = RED;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carTrafficStatus>
				break;
 220:	d4 cf       	rjmp	.-88     	; 0x1ca <normalMode>
			}
			// if the direction is up then it is the green traffic turn
			else if(direction == UP)
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	29 f4       	brne	.+10     	; 0x230 <normalMode+0x66>
			{
				carTrafficStatus = GREEN;
 226:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carTrafficStatus>
				direction = DOWN;
 22a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <direction>
				break;
 22e:	cd cf       	rjmp	.-102    	; 0x1ca <normalMode>
			}
			case RED:
			setTrafficLight(CAR_TRAFFIC,RED); // turns on red traffic
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
			Timer1_delay_5s(); // delay 5 seconds
 238:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Timer1_delay_5s>
			/* if we are back from interrupt the variable will be yes then we will need to break the switch statement
			 to start over */
			if (backFromPedestrian == YES)
 23c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	19 f4       	brne	.+6      	; 0x24a <normalMode+0x80>
			{
				backFromPedestrian = NO;
 244:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 248:	c0 cf       	rjmp	.-128    	; 0x1ca <normalMode>
			}
			// else it will be yellow turn and we set the direction is up
			else
			{
				carTrafficStatus = YELLOW;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carTrafficStatus>
				direction = UP;
 250:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <direction>
				break;
 254:	ba cf       	rjmp	.-140    	; 0x1ca <normalMode>

00000256 <pedestrianMode>:
}

void pedestrianMode()
{
	// get the car traffic status that the program interrupted
	if(carTrafficStatus == RED)
 256:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carTrafficStatus>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	c1 f4       	brne	.+48     	; 0x28e <pedestrianMode+0x38>
	{
		
		setTrafficLight(PEDESTRIAN_TRAFFIC, GREEN); // set green in pedestrian traffic and then 
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		Timer1_delay_5s(); // 5 seconds delay
 266:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Timer1_delay_5s>
		LED_off(CAR_PORT, RED); // turn off red in car traffic
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		setTrafficLight(PEDESTRIAN_TRAFFIC, YELLOW); // both yellow traffic will be blinking
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		setTrafficLight(PEDESTRIAN_TRAFFIC, RED); // set pedestrian traffic to red until someone pushes the button again
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		carTrafficStatus = GREEN; // set the status to green to return to green in car traffic
 282:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carTrafficStatus>
		backFromPedestrian = YES; // set to yes so that the switch statement is broken as soon as possible so that car traffic returns to green
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return;
 28c:	08 95       	ret
	}
	else if((carTrafficStatus == YELLOW) || (carTrafficStatus == GREEN))
 28e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carTrafficStatus>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	21 f0       	breq	.+8      	; 0x29e <pedestrianMode+0x48>
 296:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carTrafficStatus>
 29a:	81 11       	cpse	r24, r1
 29c:	27 c0       	rjmp	.+78     	; 0x2ec <pedestrianMode+0x96>
	{
		// turn off both car traffic that are possible to be on
		LED_off(CAR_PORT, GREEN);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		LED_off(CAR_PORT, YELLOW);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		setTrafficLight(PEDESTRIAN_TRAFFIC, YELLOW); // blinking of both yellow traffic
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		setTrafficLight(PEDESTRIAN_TRAFFIC, GREEN); // set pedestrian traffic to green
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		setTrafficLight(CAR_TRAFFIC, RED); // set car traffic to green
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		Timer1_delay_5s(); // delay 5 seconds
 2c6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Timer1_delay_5s>
		LED_off(CAR_PORT, RED); // urn off car traffic
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_off>
		setTrafficLight(PEDESTRIAN_TRAFFIC, YELLOW); // both yellow traffic blinking again
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		setTrafficLight(PEDESTRIAN_TRAFFIC, RED); // set pedestrian traffic to red until the button is pressed again
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 89 00 	call	0x112	; 0x112 <setTrafficLight>
		carTrafficStatus = GREEN; // set status to green to return to green in car traffic
 2e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carTrafficStatus>
		backFromPedestrian = YES; // set to yes so that the switch statement is broken as soon as possible so that car traffic returns to green
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ec:	08 95       	ret

000002ee <__vector_1>:
	
}

// interrupt service routine
ISR(EXT_INT_0)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	pedestrianMode();
 310:	0e 94 2b 01 	call	0x256	; 0x256 <pedestrianMode>
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <LED_on>:
	DIO_init(ledPort , ledPin, OUT); // initialize pin as output
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
	DIO_write(ledPort , ledPin, HIGH); // write high to LED pin
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write>
 33c:	08 95       	ret

0000033e <LED_off>:
}

void LED_off(uint8_t ledPort, uint8_t ledPin)
{
	DIO_write(ledPort , ledPin, LOW); // write low to LED pin
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write>
 344:	08 95       	ret

00000346 <LED_toggle>:
}

void LED_toggle(uint8_t ledPort, uint8_t ledPin)
{
	DIO_toggle(ledPort , ledPin); // change LED status by using toggle function
 346:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_toggle>
 34a:	08 95       	ret

0000034c <main>:

#define F_CPU 16000000UL
#include "Application/application.h"
int main(void)
{
	app_init();
 34c:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
   
    while (1) 
    {	
		
		normalMode();
 350:	0e 94 e5 00 	call	0x1ca	; 0x1ca <normalMode>
 354:	fd cf       	rjmp	.-6      	; 0x350 <main+0x4>

00000356 <DIO_init>:
		break;
		case PORT_C:
			*value = ((PINC&(1<<pinNumber))>>pinNumber); // get state -> read bit
		break;
		case PORT_D:
			*value = ((PIND&(1<<pinNumber))>>pinNumber); // get state -> read bit
 356:	82 34       	cpi	r24, 0x42	; 66
 358:	31 f1       	breq	.+76     	; 0x3a6 <DIO_init+0x50>
 35a:	18 f4       	brcc	.+6      	; 0x362 <DIO_init+0xc>
 35c:	81 34       	cpi	r24, 0x41	; 65
 35e:	39 f0       	breq	.+14     	; 0x36e <DIO_init+0x18>
 360:	08 95       	ret
 362:	83 34       	cpi	r24, 0x43	; 67
 364:	e1 f1       	breq	.+120    	; 0x3de <DIO_init+0x88>
 366:	84 34       	cpi	r24, 0x44	; 68
 368:	09 f4       	brne	.+2      	; 0x36c <DIO_init+0x16>
 36a:	54 c0       	rjmp	.+168    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 36c:	08 95       	ret
 36e:	41 11       	cpse	r20, r1
 370:	0c c0       	rjmp	.+24     	; 0x38a <DIO_init+0x34>
 372:	2a b3       	in	r18, 0x1a	; 26
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_init+0x28>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_init+0x24>
 382:	80 95       	com	r24
 384:	82 23       	and	r24, r18
 386:	8a bb       	out	0x1a, r24	; 26
 388:	08 95       	ret
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	09 f0       	breq	.+2      	; 0x390 <DIO_init+0x3a>
 38e:	5c c0       	rjmp	.+184    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 390:	2a b3       	in	r18, 0x1a	; 26
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0x46>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0x42>
 3a0:	82 2b       	or	r24, r18
 3a2:	8a bb       	out	0x1a, r24	; 26
 3a4:	08 95       	ret
 3a6:	41 11       	cpse	r20, r1
 3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <DIO_init+0x6c>
 3aa:	27 b3       	in	r18, 0x17	; 23
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0x60>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0x5c>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_init+0x72>
 3c6:	40 c0       	rjmp	.+128    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3c8:	27 b3       	in	r18, 0x17	; 23
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x7e>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x7a>
 3d8:	82 2b       	or	r24, r18
 3da:	87 bb       	out	0x17, r24	; 23
 3dc:	08 95       	ret
 3de:	41 11       	cpse	r20, r1
 3e0:	0c c0       	rjmp	.+24     	; 0x3fa <DIO_init+0xa4>
 3e2:	24 b3       	in	r18, 0x14	; 20
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_init+0x98>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_init+0x94>
 3f2:	80 95       	com	r24
 3f4:	82 23       	and	r24, r18
 3f6:	84 bb       	out	0x14, r24	; 20
 3f8:	08 95       	ret
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	29 f5       	brne	.+74     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3fe:	24 b3       	in	r18, 0x14	; 20
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	84 bb       	out	0x14, r24	; 20
 412:	08 95       	ret
 414:	41 11       	cpse	r20, r1
 416:	0c c0       	rjmp	.+24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 418:	21 b3       	in	r18, 0x11	; 17
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	80 95       	com	r24
 42a:	82 23       	and	r24, r18
 42c:	81 bb       	out	0x11, r24	; 17
 42e:	08 95       	ret
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	51 f4       	brne	.+20     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 434:	21 b3       	in	r18, 0x11	; 17
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	81 bb       	out	0x11, r24	; 17
 448:	08 95       	ret

0000044a <DIO_write>:
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	31 f1       	breq	.+76     	; 0x49a <DIO_write+0x50>
 44e:	18 f4       	brcc	.+6      	; 0x456 <DIO_write+0xc>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	39 f0       	breq	.+14     	; 0x462 <DIO_write+0x18>
 454:	08 95       	ret
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	e1 f1       	breq	.+120    	; 0x4d2 <DIO_write+0x88>
 45a:	84 34       	cpi	r24, 0x44	; 68
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_write+0x16>
 45e:	54 c0       	rjmp	.+168    	; 0x508 <DIO_write+0xbe>
 460:	08 95       	ret
 462:	41 11       	cpse	r20, r1
 464:	0c c0       	rjmp	.+24     	; 0x47e <DIO_write+0x34>
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_write+0x28>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_write+0x24>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	8b bb       	out	0x1b, r24	; 27
 47c:	08 95       	ret
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	09 f0       	breq	.+2      	; 0x484 <DIO_write+0x3a>
 482:	5c c0       	rjmp	.+184    	; 0x53c <DIO_write+0xf2>
 484:	2b b3       	in	r18, 0x1b	; 27
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_write+0x46>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_write+0x42>
 494:	82 2b       	or	r24, r18
 496:	8b bb       	out	0x1b, r24	; 27
 498:	08 95       	ret
 49a:	41 11       	cpse	r20, r1
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <DIO_write+0x6c>
 49e:	28 b3       	in	r18, 0x18	; 24
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_write+0x60>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_write+0x5c>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	88 bb       	out	0x18, r24	; 24
 4b4:	08 95       	ret
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_write+0x72>
 4ba:	40 c0       	rjmp	.+128    	; 0x53c <DIO_write+0xf2>
 4bc:	28 b3       	in	r18, 0x18	; 24
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0x7e>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0x7a>
 4cc:	82 2b       	or	r24, r18
 4ce:	88 bb       	out	0x18, r24	; 24
 4d0:	08 95       	ret
 4d2:	41 11       	cpse	r20, r1
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <DIO_write+0xa4>
 4d6:	25 b3       	in	r18, 0x15	; 21
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_write+0x98>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_write+0x94>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	85 bb       	out	0x15, r24	; 21
 4ec:	08 95       	ret
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	29 f5       	brne	.+74     	; 0x53c <DIO_write+0xf2>
 4f2:	25 b3       	in	r18, 0x15	; 21
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_write+0xb4>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_write+0xb0>
 502:	82 2b       	or	r24, r18
 504:	85 bb       	out	0x15, r24	; 21
 506:	08 95       	ret
 508:	41 11       	cpse	r20, r1
 50a:	0c c0       	rjmp	.+24     	; 0x524 <DIO_write+0xda>
 50c:	22 b3       	in	r18, 0x12	; 18
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_write+0xce>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_write+0xca>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	82 bb       	out	0x12, r24	; 18
 522:	08 95       	ret
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	51 f4       	brne	.+20     	; 0x53c <DIO_write+0xf2>
 528:	22 b3       	in	r18, 0x12	; 18
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_write+0xea>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_write+0xe6>
 538:	82 2b       	or	r24, r18
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret

0000053e <DIO_toggle>:
		break;
	}
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber)
 53e:	82 34       	cpi	r24, 0x42	; 66
 540:	a1 f0       	breq	.+40     	; 0x56a <DIO_toggle+0x2c>
 542:	18 f4       	brcc	.+6      	; 0x54a <DIO_toggle+0xc>
 544:	81 34       	cpi	r24, 0x41	; 65
 546:	31 f0       	breq	.+12     	; 0x554 <DIO_toggle+0x16>
 548:	08 95       	ret
 54a:	83 34       	cpi	r24, 0x43	; 67
 54c:	c9 f0       	breq	.+50     	; 0x580 <DIO_toggle+0x42>
 54e:	84 34       	cpi	r24, 0x44	; 68
 550:	11 f1       	breq	.+68     	; 0x596 <DIO_toggle+0x58>
 552:	08 95       	ret
	{
		case PORT_A:
		PORTA ^= (1<<pinNumber);
 554:	2b b3       	in	r18, 0x1b	; 27
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_toggle+0x22>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_toggle+0x1e>
 564:	82 27       	eor	r24, r18
 566:	8b bb       	out	0x1b, r24	; 27
		break;
 568:	08 95       	ret
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 56a:	28 b3       	in	r18, 0x18	; 24
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_toggle+0x38>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_toggle+0x34>
 57a:	82 27       	eor	r24, r18
 57c:	88 bb       	out	0x18, r24	; 24
		break;
 57e:	08 95       	ret
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 580:	25 b3       	in	r18, 0x15	; 21
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_toggle+0x4e>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_toggle+0x4a>
 590:	82 27       	eor	r24, r18
 592:	85 bb       	out	0x15, r24	; 21
		break;
 594:	08 95       	ret
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 596:	22 b3       	in	r18, 0x12	; 18
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_toggle+0x64>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_toggle+0x60>
 5a6:	82 27       	eor	r24, r18
 5a8:	82 bb       	out	0x12, r24	; 18
 5aa:	08 95       	ret

000005ac <timer1_delay_1s>:
}

void timer1_delay_1s()
{
	// timer initializations
	TCCR1B = 0x00;
 5ac:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xC2;
 5ae:	82 ec       	ldi	r24, 0xC2	; 194
 5b0:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xF7;
 5b2:	87 ef       	ldi	r24, 0xF7	; 247
 5b4:	8c bd       	out	0x2c, r24	; 44
	TIFR |= (1<<2); // clear the flag
 5b6:	88 b7       	in	r24, 0x38	; 56
 5b8:	84 60       	ori	r24, 0x04	; 4
 5ba:	88 bf       	out	0x38, r24	; 56
	TCCR1B |= ((1<<1) | (1<<0)); // start timer (prescalar = 64)
 5bc:	8e b5       	in	r24, 0x2e	; 46
 5be:	83 60       	ori	r24, 0x03	; 3
 5c0:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR & (1<<2)) == 0);  // wait for flag
 5c2:	08 b6       	in	r0, 0x38	; 56
 5c4:	02 fe       	sbrs	r0, 2
 5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <timer1_delay_1s+0x16>
	
	TCCR1B = 0x00; // stop the timer
 5c8:	1e bc       	out	0x2e, r1	; 46
 5ca:	08 95       	ret

000005cc <Timer1_delay_5s>:
}

void Timer1_delay_5s()
{
	// timer initializations
	TCNT1H = 0xB3;
 5cc:	83 eb       	ldi	r24, 0xB3	; 179
 5ce:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xB5;
 5d0:	85 eb       	ldi	r24, 0xB5	; 181
 5d2:	8c bd       	out	0x2c, r24	; 44
	TIFR |= (1<<2); // clear the flag
 5d4:	88 b7       	in	r24, 0x38	; 56
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	88 bf       	out	0x38, r24	; 56
	TCCR1B |= (1<<2); // start timer (prescalar = 256)
 5da:	8e b5       	in	r24, 0x2e	; 46
 5dc:	84 60       	ori	r24, 0x04	; 4
 5de:	8e bd       	out	0x2e, r24	; 46
	
	while ((TIFR & (1<<2)) == 0); // wait for flag
 5e0:	08 b6       	in	r0, 0x38	; 56
 5e2:	02 fe       	sbrs	r0, 2
 5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <Timer1_delay_5s+0x14>
	
	TCCR1B = 0x00; // stop the timer
 5e6:	1e bc       	out	0x2e, r1	; 46
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
